name: build config deployment zip

on:
  push:
    branches:
      - main

jobs:
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x86_64, arm64]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up QEMU (ARM only)
        if: ${{ matrix.arch == 'arm64' }}
        uses: docker/setup-qemu-action@v2
        with:
          platforms: linux/arm64

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            curl \
            tar \
            xz-utils \
            pkg-config \
            libncurses-dev

      - name: Build Zsh on linux-${{ matrix.arch }}
        run: |
          ZSH_VER=5.9
          OUTDIR=out/linux-${{ matrix.arch }}
          mkdir -p "$OUTDIR"
          curl -fsSL "https://www.zsh.org/pub/zsh-${ZSH_VER}.tar.xz" | tar -xJ
          cd "zsh-${ZSH_VER}"
          ./configure \
            --without-tcsetpgrp \
            --with-term-lib=ncurses \
            --prefix="$(pwd)/../$OUTDIR"
          make -j"$(nproc)"
          make install
          cd ..

      - name: Upload Linux Zsh binary
        uses: actions/upload-artifact@v4
        with:
          name: linux-${{ matrix.arch }}-zsh
          path: out/linux-${{ matrix.arch }}/bin/zsh

  build-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [x86_64, arm64]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install build dependencies
        run: |
          brew install autoconf make pkg-config curl xz ncurses

      - name: Build Zsh on macos-${{ matrix.arch }}
        run: |
          ZSH_VER=5.9
          OUTDIR=out/macos-${{ matrix.arch }}
          mkdir -p "$OUTDIR"
          curl -fsSL "https://www.zsh.org/pub/zsh-${ZSH_VER}.tar.xz" | tar -xJ
          cd "zsh-${ZSH_VER}"
          ./Util/preconfig || true
          CFLAGS="-O2 -arch ${{ matrix.arch }}" \
          LDFLAGS="-arch ${{ matrix.arch }}" \
          ./configure \
            --without-tcsetpgrp \
            --with-term-lib=ncurses \
            --prefix="$(pwd)/../$OUTDIR"
          make -j"$(sysctl -n hw.logicalcpu)"
          make install
          cd ..

      - name: Upload macOS Zsh binary
        uses: actions/upload-artifact@v4
        with:
          name: macos-${{ matrix.arch }}-zsh
          path: out/macos-${{ matrix.arch }}/bin/zsh

  release:
    needs:
      - build-linux
      - build-macos
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create deployment bundle
        shell: bash
        run: |
          mkdir -p pkg
          # copy README and theme
          cp README.md mojibake.omp.json pkg/
          # copy and rename installer script
          cp setup-zsh.sh pkg/mojibake.sh
          # enable globbing for deep search
          shopt -s globstar
          # find and copy zsh binaries
          for f in artifacts/*-zsh/**/bin/zsh; do
            # artifact dir name e.g. linux-x86_64-zsh
            artifactName=$(basename "$(dirname "$(dirname "$(dirname "$f")")")")
            osArch=${artifactName%-zsh}
            os=${osArch%%-*}
            cpu=${osArch#*-}
            prefix=$([[ "$os" == "macos" ]] && echo "osx" || echo "linux")
            arch2=$([[ "$cpu" == "x86_64" ]] && echo "amd64" || echo "arm64")
            cp "$f" "pkg/zsh.${prefix}.${arch2}"
          done
          cd pkg
          zip -r ../mojibake-zsh-bundle.zip README.md mojibake.sh mojibake.omp.json zsh.*

      - name: Create or update GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: latest
          commit: main
          allowUpdates: true
          removeArtifacts: true
          artifacts: mojibake-zsh-bundle.zip
