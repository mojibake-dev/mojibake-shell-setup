name: Build & Release Zsh

on:
  push:
    branches:
      - main

jobs:
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x86_64, arm64]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up QEMU (ARM only)
        if: ${{ matrix.arch == 'arm64' }}
        uses: docker/setup-qemu-action@v2
        with:
          platforms: linux/arm64

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            curl \
            tar \
            xz-utils \
            pkg-config \
            libncurses-dev

      - name: Build Zsh on x86_64
        if: ${{ matrix.arch == 'x86_64' }}
        run: |
          ZSH_VER=5.9
          OUTDIR=out/linux-x86_64
          mkdir -p "$OUTDIR"
          curl -fsSL "https://www.zsh.org/pub/zsh-${ZSH_VER}.tar.xz" \
            | tar -xJ
          cd "zsh-${ZSH_VER}"
          ./configure \
            --without-tcsetpgrp \
            --with-term-lib=ncurses \
            --prefix="$(pwd)/../$OUTDIR"
          make -j"$(nproc)"
          make install
          cd ..

      - name: Build Zsh on ARM64
        if: ${{ matrix.arch == 'arm64' }}
        uses: addnab/docker-run-action@v3
        with:
          image: ubuntu:22.04
          options: |
            --platform linux/arm64
            --volume ${{ github.workspace }}:/src
            --volume ${{ github.workspace }}/out/linux-arm64:/out
          run: |
            apt-get update
            apt-get install -y \
              build-essential \
              libncurses-dev \
              curl \
              tar \
              xz-utils \
              pkg-config
            cd /src
            ZSH_VER=5.9
            curl -fsSL "https://www.zsh.org/pub/zsh-${ZSH_VER}.tar.xz" \
              | tar -xJ
            cd "zsh-${ZSH_VER}"
            ./configure \
              --without-tcsetpgrp \
              --with-term-lib=ncurses \
              --prefix=/out
            make -j"$(nproc)"
            make install

      - name: Package Linux build
        run: |
          git ls-files > filelist.txt
          echo "out/linux-${{ matrix.arch }}/bin/zsh" >> filelist.txt
          zip -r zsh-linux-${{ matrix.arch }}.zip -@ < filelist.txt

      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: zsh-linux-${{ matrix.arch }}
          path: zsh-linux-${{ matrix.arch }}.zip

  build-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [x86_64, arm64]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install build dependencies
        run: |
          brew install autoconf make pkg-config curl xz ncurses

      - name: Build Zsh on macOS ${{ matrix.arch }}
        run: |
          ZSH_VER=5.9
          OUTDIR=out/macos-${{ matrix.arch }}
          mkdir -p "$OUTDIR"
          curl -fsSL "https://www.zsh.org/pub/zsh-${ZSH_VER}.tar.xz" \
            | tar -xJ
          cd "zsh-${ZSH_VER}"
          ./Util/preconfig || true
          CFLAGS="-O2 -arch ${{ matrix.arch }}" \
          LDFLAGS="-arch ${{ matrix.arch }}" \
          ./configure \
            --without-tcsetpgrp \
            --with-term-lib=ncurses \
            --prefix="$(pwd)/../$OUTDIR"
          make -j"$(sysctl -n hw.logicalcpu)"
          make install
          cd ..

      - name: Package macOS build
        run: |
          git ls-files > filelist.txt
          echo "out/macos-${{ matrix.arch }}/bin/zsh" >> filelist.txt
          zip -r zsh-macos-${{ matrix.arch }}.zip -@ < filelist.txt

      - name: Upload macOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: zsh-macos-${{ matrix.arch }}
          path: zsh-macos-${{ matrix.arch }}.zip

  release:
    needs:
      - build-linux
      - build-macos
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create GitHub Release & upload bundles
        uses: ncipollo/release-action@v1
        with:
          tag: main-build-${{ github.run_number }}
          artifacts: artifacts/**/*.zip
