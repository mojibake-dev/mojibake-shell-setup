name: Build & Release Zsh

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        arch: [x86_64, arm64]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # 1) Linux: build ncurses from source into ncurses_out
      - name: Build ncurses (Linux only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          NCURSES_VER=6.3
          curl -fsSL https://ftp.gnu.org/pub/gnu/ncurses/ncurses-${NCURSES_VER}.tar.gz \
            | tar xz
          cd ncurses-${NCURSES_VER}
          ./configure \
            --prefix="$(pwd)/../ncurses_out" \
            --with-shared=no \
            --enable-widec \
            --without-debug \
            --without-ada
          make -j"$(nproc)"
          make install
          cd ..

      # 2) Install build tools
      - name: Install build tools (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential curl tar xz-utils pkg-config
      - name: Install build tools (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install autoconf make pkg-config curl xz

      # 3) Configure & build Zsh, pointing at ncurses_out
      - name: Configure & build Zsh
        run: |
          ZSH_VER=5.9
          OUTDIR=out/${{ matrix.os }}-${{ matrix.arch }}
          mkdir -p "$OUTDIR"

          # set HOST, CFLAGS, LDFLAGS per OS/arch
          case "${{ matrix.os }}" in
            macos-latest)
              export CFLAGS="-O2 -arch ${{ matrix.arch }}"
              export LDFLAGS="-arch ${{ matrix.arch }}"
              HOST=""
              ;;
            ubuntu-latest)
              if [ "${{ matrix.arch }}" = "arm64" ]; then
                HOST="--host=aarch64-linux-gnu"
              else
                HOST=""
              fi
              export CPPFLAGS="-I$(pwd)/ncurses_out/include"
              export LDFLAGS="-static -L$(pwd)/ncurses_out/lib -ltinfo -lncursesw"
              export PKG_CONFIG_PATH="$(pwd)/ncurses_out/lib/pkgconfig"
              ;;
            *)
              echo "Unsupported OS: ${{ matrix.os }}" && exit 1
              ;;
          esac

          # fetch and unpack Zsh
          curl -fsSL https://www.zsh.org/pub/zsh-${ZSH_VER}.tar.xz \
            | tar -xJ
          cd zsh-${ZSH_VER}

          # on macOS run preconfig helper
          [[ "${{ matrix.os }}" = "macos-latest" ]] && ./Util/preconfig || true

          # configure against our ncurses, disable tcsetpgrp
          ./configure $HOST \
            --without-tcsetpgrp \
            --with-term-lib=ncurses \
            --prefix="$(pwd)/../$OUTDIR"

          make -j"$(nproc || sysctl -n hw.ncpu)"
          make install
          cd ..

      # 4) Package: all tracked files + the built zsh binary
      - name: Package (all tracked files + binary)
        run: |
          git ls-files > filelist.txt
          echo "out/${{ matrix.os }}-${{ matrix.arch }}/bin/zsh" >> filelist.txt
          zip -r zsh-${{ matrix.os }}-${{ matrix.arch }}.zip -@ < filelist.txt

      # 5) Upload artifact
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: zsh-${{ matrix.os }}-${{ matrix.arch }}
          path: zsh-${{ matrix.os }}-${{ matrix.arch }}.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create GitHub Release & upload bundles
        uses: ncipollo/release-action@v1
        with:
          tag: main-build-${{ github.run_number }}
          artifacts: artifacts/*.zip
